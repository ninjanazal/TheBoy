#include "instruction.h"

namespace TheBoy {

	/**
	 * @brief Defined instruction set for the LR35902 (GameBoy CPU)
	 *  
	 */
	static Instruc instrucSet[0x100] = {
		{INST_NOP, OPMODE_NONE},
		{INST_LD, OPMODE_R_V16, REG_BC},
		{INST_LD, OPMODE_AR_R, REG_BC, REG_A},
		{INST_INC, OPMODE_R, REG_BC},
		{INST_INC, OPMODE_R, REG_B},
		{INST_DEC, OPMODE_R, REG_B},
		{INST_LD, OPMODE_R_V8, REG_B},
		{INST_RLCA},
		{INST_LD, OPMODE_A16_R, REG_NONE, REG_SP},
		{INST_ADD, OPMODE_R_R, REG_HL, REG_BC},
		{INST_LD, OPMODE_R_AR, REG_A, REG_BC},
		{INST_DEC, OPMODE_R, REG_BC},
		{INST_INC, OPMODE_R, REG_C},
		{INST_DEC, OPMODE_R, REG_C},
		{INST_LD, OPMODE_R_V8, REG_C},
		{INST_RRCA},
		{INST_STOP},
		{INST_LD, OPMODE_R_V16, REG_DE},
		{INST_LD, OPMODE_AR_R, REG_DE, REG_A},
		{INST_INC, OPMODE_R, REG_DE},
		{INST_INC, OPMODE_R, REG_D},
		{INST_DEC, OPMODE_R, REG_D},
		{INST_LD, OPMODE_R_V8, REG_D},
		{INST_RLA},
		{INST_JR, OPMODE_V8},
		{INST_ADD, OPMODE_R_R, REG_HL, REG_DE},
		{INST_LD, OPMODE_R_AR, REG_A, REG_DE},
		{INST_DEC, OPMODE_R, REG_DE},
		{INST_INC, OPMODE_R, REG_E},
		{INST_DEC, OPMODE_R, REG_E},
		{INST_LD, OPMODE_R_V8, REG_E},
		{INST_RRA},
		{INST_JR, OPMODE_V8, REG_NONE, REG_NONE, CONDTYPE_NZ},
		{INST_LD, OPMODE_R_V16, REG_HL},
		{INST_LD, OPMODE_HLI_R, REG_HL, REG_A},
		{INST_INC, OPMODE_R, REG_HL},
		{INST_INC, OPMODE_R, REG_H},
		{INST_DEC, OPMODE_R, REG_H},
		{INST_LD, OPMODE_R_V8, REG_H},
		{INST_DAA},
		{INST_JR, OPMODE_V8, REG_NONE, REG_NONE, CONDTYPE_Z},
		{INST_ADD, OPMODE_R_R, REG_HL, REG_HL},
		{INST_LD, OPMODE_R_HLI, REG_A, REG_HL},
		{INST_DEC, OPMODE_R, REG_HL},
		{INST_INC, OPMODE_R, REG_L},
		{INST_DEC, OPMODE_R, REG_L},
		{INST_LD, OPMODE_R_V8, REG_L},
		{INST_CPL},
		{INST_JR, OPMODE_V8, REG_NONE, REG_NONE, CONDTYPE_NC},
		{INST_LD, OPMODE_R_V16, REG_SP},
		{INST_LD, OPMODE_HLD_R, REG_HL, REG_A},
		{INST_INC, OPMODE_R, REG_SP},
		{INST_INC, OPMODE_R, REG_HL},
		{INST_DEC, OPMODE_AR, REG_HL},
		{INST_LD, OPMODE_AR_V8, REG_HL},
		{INST_SCF},
		{INST_JR, OPMODE_V8, REG_NONE, REG_NONE, CONDTYPE_C},
		{INST_ADD, OPMODE_R_R, REG_HL, REG_SP},
		{INST_LD, OPMODE_R_HLD, REG_A, REG_HL},
		{INST_DEC, OPMODE_R, REG_SP},
		{INST_INC, OPMODE_R, REG_A},
		{INST_DEC, OPMODE_R, REG_A},
		{INST_LD, OPMODE_R_V8, REG_A},
		{INST_CCF},
		{INST_LD, OPMODE_R_R, REG_B, REG_B},
		{INST_LD, OPMODE_R_R, REG_B, REG_C},
		{INST_LD, OPMODE_R_R, REG_B, REG_D},
		{INST_LD, OPMODE_R_R, REG_B, REG_E},
		{INST_LD, OPMODE_R_R, REG_B, REG_H},
		{INST_LD, OPMODE_R_R, REG_B, REG_L},
		{INST_LD, OPMODE_R_AR, REG_B, REG_HL},
		{INST_LD, OPMODE_R_R, REG_B, REG_A},
		{INST_LD, OPMODE_R_R, REG_C, REG_B},
		{INST_LD, OPMODE_R_R, REG_C, REG_C},
		{INST_LD, OPMODE_R_R, REG_C, REG_D},
		{INST_LD, OPMODE_R_R, REG_C, REG_E},
		{INST_LD, OPMODE_R_R, REG_C, REG_H},
		{INST_LD, OPMODE_R_R, REG_C, REG_L},
		{INST_LD, OPMODE_R_AR, REG_C, REG_HL},
		{INST_LD, OPMODE_R_R, REG_C, REG_A},
		{INST_LD, OPMODE_R_R, REG_D, REG_B},
		{INST_LD, OPMODE_R_R, REG_D, REG_C},
		{INST_LD, OPMODE_R_R, REG_D, REG_D},
		{INST_LD, OPMODE_R_R, REG_D, REG_E},
		{INST_LD, OPMODE_R_R, REG_D, REG_H},
		{INST_LD, OPMODE_R_R, REG_D, REG_L},
		{INST_LD, OPMODE_R_AR, REG_D, REG_HL},
		{INST_LD, OPMODE_R_R, REG_D, REG_A},
		{INST_LD, OPMODE_R_R, REG_E, REG_B},
		{INST_LD, OPMODE_R_R, REG_E, REG_C},
		{INST_LD, OPMODE_R_R, REG_E, REG_D},
		{INST_LD, OPMODE_R_R, REG_E, REG_E},
		{INST_LD, OPMODE_R_R, REG_E, REG_H},
		{INST_LD, OPMODE_R_R, REG_E, REG_L},
		{INST_LD, OPMODE_R_AR, REG_E, REG_HL},
		{INST_LD, OPMODE_R_R, REG_E, REG_A},
		{INST_LD, OPMODE_R_R, REG_H, REG_B},
		{INST_LD, OPMODE_R_R, REG_H, REG_C},
		{INST_LD, OPMODE_R_R, REG_H, REG_D},
		{INST_LD, OPMODE_R_R, REG_H, REG_E},
		{INST_LD, OPMODE_R_R, REG_H, REG_H},
		{INST_LD, OPMODE_R_R, REG_H, REG_L},
		{INST_LD, OPMODE_R_AR, REG_H, REG_HL},
		{INST_LD, OPMODE_R_R, REG_H, REG_A},
		{INST_LD, OPMODE_R_R, REG_L, REG_B},
		{INST_LD, OPMODE_R_R, REG_L, REG_C},
		{INST_LD, OPMODE_R_R, REG_L, REG_D},
		{INST_LD, OPMODE_R_R, REG_L, REG_E},
		{INST_LD, OPMODE_R_R, REG_L, REG_H},
		{INST_LD, OPMODE_R_R, REG_L, REG_L},
		{INST_LD, OPMODE_R_AR, REG_L, REG_HL},
		{INST_LD, OPMODE_R_R, REG_L, REG_A},
		{INST_LD, OPMODE_AR_R, REG_HL, REG_B},
		{INST_LD, OPMODE_AR_R, REG_HL, REG_C},
		{INST_LD, OPMODE_AR_R, REG_HL, REG_D},
		{INST_LD, OPMODE_AR_R, REG_HL, REG_E},
		{INST_LD, OPMODE_AR_R, REG_HL, REG_H},
		{INST_LD, OPMODE_AR_R, REG_HL, REG_L},
		{INST_HALT},
		{INST_LD, OPMODE_AR_R, REG_HL, REG_A},
		{INST_LD, OPMODE_R_R, REG_A, REG_B},
		{INST_LD, OPMODE_R_R, REG_A, REG_C},
		{INST_LD, OPMODE_R_R, REG_A, REG_D},
		{INST_LD, OPMODE_R_R, REG_A, REG_E},
		{INST_LD, OPMODE_R_R, REG_A, REG_H},
		{INST_LD, OPMODE_R_R, REG_A, REG_L},
		{INST_LD, OPMODE_R_AR, REG_A, REG_HL},
		{INST_LD, OPMODE_R_R, REG_A, REG_A},
		{INST_ADD, OPMODE_R_R, REG_A, REG_B},
		{INST_ADD, OPMODE_R_R, REG_A, REG_C},
		{INST_ADD, OPMODE_R_R, REG_A, REG_D},
		{INST_ADD, OPMODE_R_R, REG_A, REG_E},
		{INST_ADD, OPMODE_R_R, REG_A, REG_H},
		{INST_ADD, OPMODE_R_R, REG_A, REG_L},
		{INST_ADD, OPMODE_R_AR, REG_A, REG_HL},
		{INST_ADD, OPMODE_R_R, REG_A, REG_A},
		{INST_ADC, OPMODE_R_R, REG_A, REG_B},
		{INST_ADC, OPMODE_R_R, REG_A, REG_C},
		{INST_ADC, OPMODE_R_R, REG_A, REG_D},
		{INST_ADC, OPMODE_R_R, REG_A, REG_E},
		{INST_ADC, OPMODE_R_R, REG_A, REG_H},
		{INST_ADC, OPMODE_R_R, REG_A, REG_L},
		{INST_ADC, OPMODE_R_AR, REG_A, REG_HL},
		{INST_ADC, OPMODE_R_R, REG_A, REG_A},
		// For sub instructions, declare the 1st Registor to be A
		// Keep uniform
		{INST_SUB, OPMODE_R_R, REG_A, REG_B},
		{INST_SUB, OPMODE_R_R, REG_A, REG_C},
		{INST_SUB, OPMODE_R_R, REG_A, REG_D},
		{INST_SUB, OPMODE_R_R, REG_A, REG_E},
		{INST_SUB, OPMODE_R_R, REG_A, REG_H},
		{INST_SUB, OPMODE_R_R, REG_A, REG_L},
		{INST_SUB, OPMODE_R_AR, REG_A, REG_HL},
		{INST_SUB, OPMODE_R_R, REG_A, REG_A},
		{INST_SBC, OPMODE_R_R, REG_A, REG_B},
		{INST_SBC, OPMODE_R_R, REG_A, REG_C},
		{INST_SBC, OPMODE_R_R, REG_A, REG_D},
		{INST_SBC, OPMODE_R_R, REG_A, REG_E},
		{INST_SBC, OPMODE_R_R, REG_A, REG_H},
		{INST_SBC, OPMODE_R_R, REG_A, REG_L},
		{INST_SBC, OPMODE_R_AR, REG_A, REG_HL},
		{INST_SBC, OPMODE_R_R, REG_A, REG_A},
		{INST_AND, OPMODE_R_R, REG_A, REG_B},
		{INST_AND, OPMODE_R_R, REG_A, REG_C},
		{INST_AND, OPMODE_R_R, REG_A, REG_D},
		{INST_AND, OPMODE_R_R, REG_A, REG_E},
		{INST_AND, OPMODE_R_R, REG_A, REG_H},
		{INST_AND, OPMODE_R_R, REG_A, REG_L},
		{INST_AND, OPMODE_R_AR, REG_A, REG_HL},
		{INST_AND, OPMODE_R_R, REG_A, REG_A},
		{INST_XOR, OPMODE_R_R, REG_A, REG_B},
		{INST_XOR, OPMODE_R_R, REG_A, REG_C},
		{INST_XOR, OPMODE_R_R, REG_A, REG_D},
		{INST_XOR, OPMODE_R_R, REG_A, REG_E},
		{INST_XOR, OPMODE_R_R, REG_A, REG_H},
		{INST_XOR, OPMODE_R_R, REG_A, REG_L},
		{INST_XOR, OPMODE_R_AR, REG_A, REG_HL},
		{INST_XOR, OPMODE_R_R, REG_A, REG_A},
		{INST_OR, OPMODE_R_R, REG_A, REG_B},
		{INST_OR, OPMODE_R_R, REG_A, REG_C},
		{INST_OR, OPMODE_R_R, REG_A, REG_D},
		{INST_OR, OPMODE_R_R, REG_A, REG_E},
		{INST_OR, OPMODE_R_R, REG_A, REG_H},
		{INST_OR, OPMODE_R_R, REG_A, REG_L},
		{INST_OR, OPMODE_R_AR, REG_A, REG_HL},
		{INST_OR, OPMODE_R_R, REG_A, REG_A},
		{INST_CP, OPMODE_R_R, REG_A, REG_B},
		{INST_CP, OPMODE_R_R, REG_A, REG_C},
		{INST_CP, OPMODE_R_R, REG_A, REG_D},
		{INST_CP, OPMODE_R_R, REG_A, REG_E},
		{INST_CP, OPMODE_R_R, REG_A, REG_H},
		{INST_CP, OPMODE_R_R, REG_A, REG_L},
		{INST_CP, OPMODE_R_AR, REG_A, REG_HL},
		{INST_CP, OPMODE_R_R, REG_A, REG_A},
		{INST_RET, OPMODE_NONE, REG_NONE, REG_NONE, CONDTYPE_NZ},
		{INST_POP, OPMODE_NONE, REG_BC},
		{INST_JP, OPMODE_V16, REG_NONE, REG_NONE, CONDTYPE_NZ},
		{INST_JP, OPMODE_V16},
		{INST_CALL, OPMODE_V16, REG_NONE, REG_NONE, CONDTYPE_NZ},
		{INST_PUSH, OPMODE_NONE, REG_BC},
		{INST_ADD, OPMODE_R_V8, REG_A},
		{INST_RST, OPMODE_NONE, REG_NONE, REG_NONE, CONDTYPE_NONE, 0x00},
		{INST_RET, OPMODE_NONE, REG_NONE, REG_NONE, CONDTYPE_Z},
		{INST_RET},
		{INST_JP, OPMODE_V16, REG_NONE, REG_NONE, CONDTYPE_Z},
		{INST_PRECB, OPMODE_V8},
		{INST_CALL, OPMODE_V16, REG_NONE, REG_NONE, CONDTYPE_Z},
		{INST_CALL, OPMODE_V16},
		{INST_ADC, OPMODE_R_V8, REG_A},
		{INST_RST, OPMODE_NONE, REG_NONE, REG_NONE, CONDTYPE_NONE, 0x08},
		{INST_RET, OPMODE_NONE, REG_NONE, REG_NONE, CONDTYPE_NC},
		{INST_POP, OPMODE_NONE, REG_BC},
		{INST_JP, OPMODE_V16, REG_NONE, REG_NONE, CONDTYPE_NC},
		{ }, // NO DEFINITION
		{INST_CALL, OPMODE_V16, REG_NONE, REG_NONE, CONDTYPE_NC},
		{INST_PUSH, OPMODE_NONE, REG_DE},
		{INST_SUB, OPMODE_R_V8, REG_A},
		{INST_RST, OPMODE_NONE, REG_NONE, REG_NONE, CONDTYPE_NONE, 0x10},
		{INST_RET, OPMODE_NONE, REG_NONE, REG_NONE, CONDTYPE_C},
		{INST_RETI},
		{INST_JP, OPMODE_V16, REG_NONE, REG_NONE, CONDTYPE_C},
		{ }, // NO DEFINITION
		{INST_CALL, OPMODE_V16, REG_NONE, REG_NONE, CONDTYPE_C},
		{ }, // NO DEFINITION
		{INST_SBC, OPMODE_R_V8, REG_A},
		{INST_RST, OPMODE_NONE, REG_NONE, REG_NONE, CONDTYPE_NONE, 0x18},
		{INST_LDH, OPMODE_A8_R, REG_NONE, REG_A},
		{INST_POP, OPMODE_NONE, REG_HL},
		{INST_LD, OPMODE_AR_R, REG_C, REG_A},
		{ }, // NO DEFINITION
		{ }, // NO DEFINITION
		{INST_PUSH, OPMODE_NONE, REG_HL},
		{INST_AND, OPMODE_R_V8, REG_A},
		{INST_RST, OPMODE_NONE, REG_NONE, REG_NONE, CONDTYPE_NONE, 0x20},
		{INST_ADD, OPMODE_R_V8, REG_SP}, 
		{INST_JP, OPMODE_R, REG_HL},
		{INST_LD, OPMODE_A16_R, REG_NONE, REG_A},
		{ }, // NO DEFINITION
		{ }, // NO DEFINITION
		{ }, // NO DEFINITION
		{INST_XOR, OPMODE_R_V8, REG_A},
		{INST_RST, OPMODE_NONE, REG_NONE, REG_NONE, CONDTYPE_NONE, 0x28},
		{INST_LDH, OPMODE_R_A8, REG_A},
		{INST_POP, OPMODE_R, REG_AF},
		{INST_LD, OPMODE_R_AR, REG_A, REG_C},
		{INST_DI},
		{ }, // NO DEFINITION
		{INST_PUSH, OPMODE_NONE, REG_AF},
		{INST_OR, OPMODE_R_V8, REG_A},
		{INST_RST, OPMODE_NONE, REG_NONE, REG_NONE, CONDTYPE_NONE, 0x30},
		{INST_LD, OPMODE_HL_SPR, REG_HL, REG_SP},
		{INST_LD, OPMODE_R_R, REG_SP, REG_HL},
		{INST_LD, OPMODE_R_A16, REG_A},
		{INST_EI},
		{ }, // NO DEFINITION
		{ }, // NO DEFINITION
		{INST_CP, OPMODE_R_V8, REG_A},
		{INST_RST, OPMODE_NONE, REG_NONE, REG_NONE, CONDTYPE_NONE, 0x38}

	};

	/**
	 * @brief Get the By Opcode object
	 * @param opCd Opcode value for the instructions
	 * @return Instruc* Pointer to Defined instruction value
	 */
	Instruc* getByOpcode(bit8 opCd){
		return &instrucSet[opCd];
	}
	
} // namespace TheBoy